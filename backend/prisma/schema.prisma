// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model users {
  user_id           Int         @id @default(autoincrement())
  username          String      @db.VarChar(100)
  firstname         String      @db.VarChar(100)
  lastname          String      @db.VarChar(120)
  password          String      @db.VarChar(120)
  email             String?     @db.VarChar(150)
  date              DateTime?   @db.Date
  proveedores       proveedores[]
  clients           clients[]
  abastecimientos   abastecimientos[]
  ventas            ventas[]
  reportes          reportes[]
}

model proveedores {
  proveedor_id            Int         @id @default(autoincrement())
  name                    String      @db.VarChar(80)
  rfc                     String      @db.VarChar(30)
  direccion               String?     @db.VarChar(255)
  tipo_situacion_fiscal   String      @db.VarChar(255)
  permiso                 String?     @db.VarChar(100)
  phone                   String?     @db.VarChar(20)
  email                   String?     @db.VarChar(200)
  user_id                 Int?        @db.Integer
  date                    DateTime?   @db.Date
  active                  Int?        @db.SmallInt
  users                   users? @relation(fields: [user_id], references: [user_id], onDelete: NoAction, onUpdate: NoAction, map: "fk_user_id")
  abastecimientos         abastecimientos[]
}

model clients {
  client_id               Int         @id @default(autoincrement())
  name                    String      @db.VarChar(80)
  rfc                     String      @db.VarChar(30)
  direccion               String      @db.VarChar(255)
  tipo_situacion_fiscal   String      @db.VarChar(255)
  permiso                 String?     @db.VarChar(100)
  phone                   String?     @db.VarChar(20)
  email                   String?     @db.VarChar(200)
  user_id                 Int         @db.Integer
  date                    DateTime?   @db.Date
  active                  Int?        @db.SmallInt
  users                   users? @relation(fields: [user_id], references: [user_id], onDelete: NoAction, onUpdate: NoAction, map: "fk_user_id_client")
  ventas                  ventas[]
}


model abastecimientos {
  abastecimiento_id     Int         @id @default(autoincrement())
  proveedor_id          Int         @db.Integer
  folio                 String      @db.VarChar(100)
  serie                 String?     @db.VarChar(100)
  folio_fiscal          String?     @db.VarChar(150)
  fecha_emision         DateTime    @db.Date
  fecha_timbrado        DateTime?   @db.Date
  lugar_expedicion      String?     @db.VarChar(150)
  exportacion           String?     @db.VarChar(150)
  uso                   String?     @db.VarChar(150)
  cantidad              Float       @db.Real
  unidad                String?     @db.VarChar(150)
  concepto              String      @db.VarChar(600)
  preciounitario        Float       @db.Real
  importe               Float       @db.Real
  ivaaplicado           Float       @db.Real
  densidad              Float?      @db.Real
  tipo_modena_id        Int         @db.SmallInt
  condicion_pago_id     Int?        @db.SmallInt
  cfdi                  String      @db.VarChar(150)
  tipoCfdi              String      @db.VarChar(100)
  preciovent            Float       @db.Real
  aclaracion            String      @db.VarChar(300)
  tipocomplemento       String      @db.VarChar(100)
  unidaddemedida        String      @db.VarChar(60)
  user_id               Int         @db.Integer
  date                  DateTime    @db.Date
  active                Int         @db.SmallInt
  proveedores           proveedores? @relation(fields: [proveedor_id], references: [proveedor_id], onDelete: NoAction, onUpdate: NoAction, map: "fk_proveedor_id")
  users                 users? @relation(fields: [user_id], references: [user_id], onDelete: NoAction, onUpdate: NoAction, map: "fk_user_id_abastecimiento")
  tipos_monedas         tipos_monedas? @relation(fields: [tipo_modena_id], references: [tipo_modena_id], onDelete: NoAction, onUpdate: NoAction, map: "fk_tipo_modena_id")
  condiciones_pagos     condiciones_pagos? @relation(fields: [condicion_pago_id], references: [condicion_pago_id], onDelete: NoAction, onUpdate: NoAction, map: "fk_condicion_pago_id")
}


model tipos_monedas {
  tipo_modena_id    Int     @id @default(autoincrement()) @db.SmallInt
  tipo_modena       String @db.VarChar(100)
  abastecimientos   abastecimientos[]
  ventas            ventas[]
}

model condiciones_pagos {
  condicion_pago_id   Int     @id @default(autoincrement()) @db.SmallInt
  condicion_pago      String @db.VarChar(100)
  abastecimientos     abastecimientos[]
  ventas              ventas[]
}

model ventas {
  venta_id                Int         @id @default(autoincrement())
  client_id               Int         @db.Integer
  folio                   String      @db.VarChar(100)
  serie                   String?     @db.VarChar(100)
  folio_fiscal            String?     @db.VarChar(150)
  fecha_emision           DateTime    @db.Date
  fecha_timbrado          DateTime?   @db.Date
  lugar_expedicion        String?     @db.VarChar(150)
  exportacion             String?     @db.VarChar(150)
  uso                     String?     @db.VarChar(150)
  cantidad                Float       @db.Real
  unidad                  String?     @db.VarChar(150)
  concepto                String      @db.VarChar(600)
  preciounitario          Float       @db.Real
  importe                 Float       @db.Real
  ivaaplicado             Float       @db.Real
  tipo_modena_id          Int         @db.SmallInt
  condicion_pago_id       Int?        @db.SmallInt
  cfdi                    String      @db.VarChar(150)
  tipoCfdi                String      @db.VarChar(100)
  preciovent              Float       @db.Real
  aclaracion              String      @db.VarChar(300)
  tipocomplemento         String      @db.VarChar(100)
  unidaddemedida          String      @db.VarChar(60)
  user_id                 Int         @db.Integer
  date                    DateTime    @db.Date
  active                  Int?        @db.SmallInt
  clients                 clients? @relation(fields: [client_id], references: [client_id], onDelete: NoAction, onUpdate: NoAction, map: "fk_client_id")
  users                   users? @relation(fields: [user_id], references: [user_id], onDelete: NoAction, onUpdate: NoAction, map: "fk_user_id_venta")
  tipos_monedas           tipos_monedas? @relation(fields: [tipo_modena_id], references: [tipo_modena_id], onDelete: NoAction, onUpdate: NoAction, map: "fk_tipo_modena_id_fk_user_id_venta")
  condiciones_pagos       condiciones_pagos? @relation(fields: [condicion_pago_id], references: [condicion_pago_id], onDelete: NoAction, onUpdate: NoAction, map: "fk_condicion_pago_id_fk_user_id_venta")
}



model reportes {
  reporte_id                            Int         @id @default(autoincrement())
  version                               String      @db.VarChar(20)
  rfccontribuyente                      String      @db.VarChar(30)
  rfcrepresentantelegal                 String      @db.VarChar(30)
  rfcproveedor                          String      @db.VarChar(30)
  caracter                              String      @db.VarChar(100)
  modalidadpermiso                      String      @db.VarChar(100)
  numpermiso                            String      @db.VarChar(100)
  claveinstalacion                      String      @db.VarChar(100)
  descripcioninstalacion                String      @db.VarChar(100)
  numeropozos                           Int         @db.SmallInt
  numerotanques                         Int         @db.SmallInt
  numeroductosentradasalida             Int         @db.SmallInt
  numeroductostransportedistribucion    Int         @db.SmallInt
  numerodispensarios                    Int         @db.SmallInt
  claveproducto                         String      @db.VarChar(50)
  composdepropanoengaslp                Float       @db.Real
  composdebutanoengaslp                 Float       @db.Real
  volumenexistenciasees                 Float       @db.Real
  fechayhoraestamedicionmes             DateTime    @db.Timestamptz
  numeroregistro                        Int         @db.Integer
  usuarioresponsable                    String      @db.VarChar(150)
  tipoevento                            Int         @db.Integer
  descripcionevento                     String      @db.VarChar(255)
  fecha_inicio                          DateTime    @db.Date
  fecha_terminacion                     DateTime    @db.Date
  tipo_reporte_id                       Int?        @db.SmallInt
  user_id                               Int         @db.Integer
  date                                  DateTime    @db.Date
  active                                Int?        @db.SmallInt
  users                                 users? @relation(fields: [user_id], references: [user_id], onDelete: NoAction, onUpdate: NoAction, map: "fk_user_id_reporte")
  tipos_reporte                         tipos_reporte? @relation(fields: [tipo_reporte_id ], references: [tipo_reporte_id ], onDelete: NoAction, onUpdate: NoAction, map: "fk_tipo_reporte_id_report")
}

model tipos_reporte {
  tipo_reporte_id     Int     @id @default(autoincrement()) @db.SmallInt
  tipo_reporte        String @db.VarChar(100)
  reportes            reportes[]
}
